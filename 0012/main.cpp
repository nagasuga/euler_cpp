// Highly divisible triangular number
//
// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?

#include <iostream>
#include <vector>

const int MAX_DIVISIBLE = 500;
//const int MAX_DIVISIBLE = 5;

long getTriangularNumber(int num) {
    long sum = 0;
    for(int i = 1; i <= num; i++) {
        sum += i;
    }
    return sum;
}

std::vector<int> getFactors(long num) {
    std::vector<int> factors;
    int smallest = num;
    for(int i=1; i <= num; i++) {
        if(i >= smallest)
            break;

        if(num % i == 0) {
            factors.push_back(i);
            smallest = num / i;
            factors.push_back(smallest);
        }
    }
    return factors;
}

int main() {
    int counter = 1;
    long num = 0;
    std::vector<int> res;

    while(true) {
        num += counter;
        res = getFactors(num);
        if(res.size() >= MAX_DIVISIBLE) {
            break;
        }
        counter++;
    }

    std::cout << "answer: " << num << std::endl;
    exit(0);
}
